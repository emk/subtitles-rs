// Compiled automatically using `build.rs` script and `peg`.

use std::collections::HashMap;
use std::iter::FromIterator;

use super::{Fragment, Node, Attributes};

#[pub]
fragment -> Fragment
    = nodes:(node*) {
        Fragment { nodes }
    }

node -> Node = text_node / entity / element

text_node -> Node
    = #quiet< text:$([^<&]+) {
        Node::Text { text: text.to_owned() }
    } > / #expected("text")

entity -> Node
    = "&" text:( entity_named / entity_hex / entity_dec) ";" {
        Node::Text { text }
    }

entity_named -> String
    = name:$("lt" / "gt" / "amp" / "apos" / "quot") {
        match name {
            "lt" => "<".to_string(),
            "gt" => ">".to_string(),
            "amp" => "&".to_string(),
            "apos" => "'".to_string(),
            "quot" => "\"".to_string(),
            _ => unreachable!("unknown named entity"),
        }
    }

entity_hex -> String
    = "#x" digits:$([0-9a-fA-F]+) {?
        parse_numeric_entity(digits, 16).map(|c| c.to_string())
    }

entity_dec -> String
    = "#" digits:$([0-9]+) {?
        parse_numeric_entity(digits, 10).map(|c| c.to_string())
    }

element -> Node
    = empty_element / start_end_element

empty_element -> Node
    = "<" name:$("br"i / "img"i) attributes:attributes ws* "/"? ">" {
        Node::Element {
            name: name.to_owned(),
            attributes,
            children: vec![],
        }
    }

start_end_element -> Node
    = start_tag:start_tag children:(node*) end_tag:end_tag {?
        let (name, attributes) = start_tag;
        if name == end_tag {
            Ok(Node::Element {
                name,
                attributes,
                children,
            })
        } else {
            Err("start and end tags must match")
        }
    }

start_tag -> (String, Attributes)
    = "<" name:$(name) attributes:attributes ws* ">" {
        (name.to_owned(), attributes)
    }

end_tag -> String
    = #quiet< "</" name:$(name) ws* ">" {
        name.to_owned()
    } > / #expected("end tag")

attributes -> Attributes
    = attributes:(attribute*) {
        HashMap::from_iter(attributes)
    }

attribute -> (String, String)
    = #quiet< ws* name:$(name) ws* "=" ws* att_value:att_value {
        (name.to_owned(), att_value)
    } > / #expected("attribute")

att_value -> String
    = att_value_double_quotes / att_value_single_quotes

// TODO: Handle escaped "<" and "&" values, if we ever need anything more
// than "<font color=...>" support.
att_value_double_quotes -> String
    = "\"" text:$([^<&"]*) "\"" {
        text.to_owned()
    }

// TODO: Handle escaped "<" and "&" values, if we ever need anything more
// than "<font color=...>" support.
att_value_single_quotes -> String
    = "'" text:$([^<&']*) "'" {
        text.to_owned()
    }

name = #quiet<[A-Za-z:_][-A-Za-z0-9:_.]*> / #expected("identifier")

ws = #quiet<[ \r\n\t]+>
